<CODEGEN_FILENAME><INTERFACE_NAME>PoolWrapper.cs</CODEGEN_FILENAME>
<REQUIRES_CODEGEN_VERSION>5.7.7</REQUIRES_CODEGEN_VERSION>
<REQUIRES_USERTOKEN>OUT_PARAM_AS</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       InterfacePoolWrapper.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Creates a class containing xfNetLink .NET pooling wrappers
;// for the methods in an xfServerPlus interface.
;//
;// Copyright (c) 2021, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
//*****************************************************************************
//
// Title:       <INTERFACE_NAME>PoolWrapper.cs
//
// Description: Pooling method wrappers for interface <INTERFACE_NAME>
//
//*****************************************************************************
// WARNING: GENERATED CODE!
// This file was generated by CodeGen. Avoid editing the file if possible.
// Any changes you make will be lost of the file is re-generated.
//*****************************************************************************

<COUNTER_1_RESET><METHOD_LOOP><PARAMETER_LOOP><IF COLLECTION_ARRAYLIST><COUNTER_1_INCREMENT></IF><IF STRUCTURE><IF COLLECTION_HANDLE><COUNTER_1_INCREMENT></IF></IF></PARAMETER_LOOP></METHOD_LOOP><IF COUNTER_1>using System.Collections;</IF>
using Microsoft.Extensions.ObjectPool;
<COUNTER_1_RESET><METHOD_LOOP><PARAMETER_LOOP><IF DATATABLE><COUNTER_1_INCREMENT></IF></PARAMETER_LOOP></METHOD_LOOP><IF COUNTER_1>using System.Data;</IF>

namespace <NAMESPACE>
{
	public static class <INTERFACE_NAME>PoolWrapper
	{
<METHOD_LOOP>
		public static <METHOD_RETURN_CSTYPE_XF> <METHOD_NAME>(this ObjectPool<<INTERFACE_NAME>> pool<IF PARAMETERS><PARAMETER_LOOP>, <IF INOUT>ref </IF><IF OUT><OUT_PARAM_AS> </IF><PARAMETER_CSTYPE_XF> <PARAMETER_NAME></PARAMETER_LOOP></IF>)
		{
			var clientInstance = pool.Get();
			try
			{
				return clientInstance.<METHOD_NAME>(<IF PARAMETERS><PARAMETER_LOOP><IF INOUT>ref </IF><IF OUT>out </IF><PARAMETER_NAME><,></PARAMETER_LOOP></IF>);
			}
			finally
			{
				pool.Return(clientInstance);
			}
		}

</METHOD_LOOP>
	}
}
